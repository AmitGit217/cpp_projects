
// Precedence and Associativity generated by chatGPT3

/*
In C++, operator precedence determines the order in which operations are
performed in an expression. For example, in the expression 1 + 2 * 3, the
multiplication operation (*) has higher precedence than the addition operation
(+), so the multiplication is done first, yielding 1 + 6 = 7. This is because
multiplication and division have higher precedence than addition and
subtraction.

Operator associativity determines the order in which operations with the same
precedence are performed. For example, the assignment operator (=) has
right-to-left associativity, so in the expression a = b = c, the rightmost
assignment (c =) is done first, followed by the middle assignment (b =). This is
because right-to-left associativity means that operations are performed from
right to left.

Here is a list of the operators in C++, listed in order of precedence from
highest to lowest:

() (function call)
[] (array subscript)
-> (structure pointer access)
. (structure member access)
++ (increment)
-- (decrement)
- (unary minus)
+ (unary plus)
! (logical negation)
~ (bitwise negation)
sizeof
* (multiplication)
/ (division)
% (modulo)
+ (addition)
- (subtraction)
<< (bitwise left shift)
>> (bitwise right shift)
< (less than)
<= (less than or equal to)
> (greater than)
>= (greater than or equal to)
== (equal to)
!= (not equal to)
& (bitwise AND)
^ (bitwise XOR)
| (bitwise OR)
&& (logical AND)
|| (logical OR)
? : (ternary conditional)
= (assignment)
+= (addition assignment)
-= (subtraction assignment)
*= (multiplication assignment)
/= (division assignment)
%= (modulo assignment)
<<= (bitwise left shift and assignment)
>>= (bitwise right shift and assignment)
&= (bitwise AND and assignment)
^= (bitwise XOR and assignment)
|= (bitwise OR and assignment)
, (comma)
Most of the operators listed above are binary operators, which operate on two
operands. The unary operators (++, --, -, +, !, ~, and sizeof) operate on a
single operand. The ternary operator (? :) operates on three operands.


 */